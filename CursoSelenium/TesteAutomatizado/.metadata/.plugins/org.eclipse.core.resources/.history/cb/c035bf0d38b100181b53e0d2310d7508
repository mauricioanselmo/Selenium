package br.com.models;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.concurrent.TimeUnit;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;

import com.sun.xml.internal.messaging.saaj.util.Base64;

public class TestBase {
	protected WebDriver driver;
// protected Login Login;
	private String jobSessionId;
	private Boolean status;

	public void setDriver(WebDriver driver) {
		this.driver = driver;
	}

	public void setSession(String string) {
		this.jobSessionId = string;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

	public void setUrl() {
		this.driver.get("http://s2m.santanderbr.pre.corp/evolucao/#/home");
	}

	@BeforeMethod
	public void beforeMethod() throws Exception {
		/*
		 * DesiredCapabilities caps = DesiredCapabilities.chrome();
		 * caps.setCapability("version", "latest"); caps.setCapability("platform",
		 * "Mac"); caps.setCapability("tunnelIdentifier", "tunel_01");
		 * caps.setCapability("parentTunnel", "connectionuser");
		 * caps.setCapability("name", "TesteArtemis"); Map<String, String> sOptions =
		 * new HashMap<String, String>(); sOptions.put("executable",
		 * "sauce-storage:executavel_02.exe"); sOptions.put("args",
		 * "[ '--silent', '-a', '-q' ]"); sOptions.put("background", "true");
		 * caps.setCapability("prerun", sOptions); WebDriver driver = new
		 * RemoteWebDriver( new URL(
		 * "http://johnny.obelar:c08569c4-d607-4750-81ef-783571da8fab@ondemand.saucelabs.com:80/wd/hub"
		 * ), caps); this.driver = driver; setSession(extractJobSessionId());
		 */

		System.setProperty("webdriver.chrome.driver", "C:\\Users\\X107937\\Desktop\\Alura\\drivers Selenium\\chromedriver.exe");
		this.driver = new ChromeDriver();
		driver.manage().window().maximize();
		;
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);

	}

	@AfterMethod
	public void afterMethod(ITestResult result) {
		setStatus(result.getStatus() == ITestResult.SUCCESS);
		saveStatus();
		if (this.driver != null) {
			this.driver.quit();
		}
	}

	/**
	 * Configuração de status do Saucelabs para salvar os status da execução
	 */
	private void saveStatus() {
		if (this.driver != null) {
			try {
				String responseJson = "{\"passed\" : " + this.getStatus() + "}";
				String credentials = "johnny.obelar:c08569c4-d607-4750-81ef-783571da8fab";
				String basicAuth = "Basic " + new String(Base64.encode(credentials.getBytes()));
				HttpPut con = new HttpPut("https://saucelabs.com/rest/v1/johnny.obelar/jobs/" + this.jobSessionId);
				con.addHeader("Authorization", basicAuth);
				con.addHeader("Content-Type", "application/json");
				con.addHeader("Content-Lenght", responseJson.getBytes().length + "");
				con.addHeader("Content-Language", "en-US");
				con.setEntity(new StringEntity(responseJson));
				HttpResponse response = HttpClientBuilder.create().build().execute(con);
				System.out.println(response.getEntity().toString());
			} catch (MalformedURLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();

			}
		}
	}

	private String extractJobSessionId() {
		return ((RemoteWebDriver) driver).getSessionId().toString();
	}

	private String getStatus() {
		return new Boolean(this.status).toString();
	}

	public WebDriver getDriver() {
		return this.driver;
	}

}
